import React, { useState, useEffect } from 'react';
import { Plus, GripVertical, Check, Clock, History, Calendar } from 'lucide-react';

export default function TaskFlow() {
  const [currentView, setCurrentView] = useState('today');
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem('tasks');
    return saved ? JSON.parse(saved) : [
      { id: 1, name: 'למלא אקסל דיאקופטי', duration: 30, completed: false, actualTime: null },
      { id: 2, name: 'למלא אקסל איליסייה', duration: 25, completed: false, actualTime: null },
      { id: 3, name: 'למלא אקסל איולוס אתנז', duration: 20, completed: false, actualTime: null },
      { id: 4, name: 'למלא אקסל נאפולי', duration: 20, completed: false, actualTime: null },
      { id: 5, name: 'לאפס אקסל איליסייה מול האקסל של אנה', duration: 35, completed: false, actualTime: null },
      { id: 6, name: 'להכין דוח Pivot Table לאיליסייה', duration: 40, completed: false, actualTime: null },
      { id: 7, name: 'לבצע תשלומים אחרונים בכל הבנקים', duration: 30, completed: false, actualTime: null },
      { id: 8, name: 'לשפר את Pivot Table של דיאקופטי (גרפים)', duration: 45, completed: false, actualTime: null }
    ];
  });
  const [history, setHistory] = useState(() => {
    const saved = localStorage.getItem('history');
    return saved ? JSON.parse(saved) : [];
  });
  const [lastSaveDate, setLastSaveDate] = useState(() => {
    return localStorage.getItem('lastSaveDate') || new Date().toDateString();
  });
  
  const [showAddForm, setShowAddForm] = useState(false);
  const [newTaskName, setNewTaskName] = useState('');
  const [newTaskDuration, setNewTaskDuration] = useState('');
  const [draggedTask, setDraggedTask] = useState(null);
  const [editingTask, setEditingTask] = useState(null);
  const [editName, setEditName] = useState('');
  const [editDuration, setEditDuration] = useState('');
  const [editActualTime, setEditActualTime] = useState('');
  const [editingTotalTime, setEditingTotalTime] = useState(false);
  const [totalPlannedTime, setTotalPlannedTime] = useState(() => {
    const saved = localStorage.getItem('totalPlannedTime');
    return saved ? parseInt(saved) : 0;
  });

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  useEffect(() => {
    localStorage.setItem('history', JSON.stringify(history));
  }, [history]);

  useEffect(() => {
    localStorage.setItem('totalPlannedTime', totalPlannedTime.toString());
  }, [totalPlannedTime]);

  useEffect(() => {
    const currentDate = new Date().toDateString();
    if (currentDate !== lastSaveDate) {
      const completedToday = tasks.filter(t => t.completed);
      if (completedToday.length > 0) {
        const dayRecord = {
          date: lastSaveDate,
          completedTasks: completedToday,
          totalPlanned: totalPlannedTime,
          totalCompleted: completedToday.reduce((sum, t) => sum + (t.actualTime || t.duration), 0)
        };
        setHistory([dayRecord, ...history]);
      }
      const incompleteTasks = tasks.filter(t => !t.completed);
      setTasks(incompleteTasks);
      setLastSaveDate(currentDate);
      localStorage.setItem('lastSaveDate', currentDate);
    }
  }, [tasks, lastSaveDate, history, totalPlannedTime]);

  const today = new Date().toLocaleDateString('he-IL', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const addTask = () => {
    if (newTaskName.trim() && newTaskDuration) {
      const newTask = {
        id: Date.now(),
        name: newTaskName,
        duration: parseInt(newTaskDuration),
        completed: false,
        actualTime: null
      };
      setTasks([...tasks, newTask]);
      setNewTaskName('');
      setNewTaskDuration('');
      setShowAddForm(false);
    }
  };

  const startEdit = (task) => {
    setEditingTask(task.id);
    setEditName(task.name);
    setEditDuration(task.duration.toString());
    setEditActualTime(task.actualTime ? task.actualTime.toString() : '');
  };

  const saveEdit = () => {
    if (editingTask && editName.trim() && editDuration) {
      setTasks(tasks.map(task => 
        task.id === editingTask 
          ? { 
              ...task, 
              name: editName, 
              duration: parseInt(editDuration),
              actualTime: editActualTime ? parseInt(editActualTime) : task.actualTime
            }
          : task
      ));
      setEditingTask(null);
      setEditName('');
      setEditDuration('');
      setEditActualTime('');
    }
  };

  const cancelEdit = () => {
    setEditingTask(null);
    setEditName('');
    setEditDuration('');
    setEditActualTime('');
  };

  const handleDragStart = (e, index) => {
    setDraggedTask(index);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e, index) => {
    e.preventDefault();
    if (draggedTask === null || draggedTask === index) return;
    
    const openTasks = tasks.filter(t => !t.completed);
    const draggedItem = openTasks[draggedTask];
    const newOpenTasks = openTasks.filter((_, i) => i !== draggedTask);
    newOpenTasks.splice(index, 0, draggedItem);
    
    const completedTasks = tasks.filter(t => t.completed);
    setTasks([...newOpenTasks, ...completedTasks]);
    setDraggedTask(index);
  };

  const handleDragEnd = () => {
    setDraggedTask(null);
  };

  const openTasks = tasks.filter(t => !t.completed);
  const completedTasks = tasks.filter(t => t.completed);
  
  const totalCompleted = completedTasks.reduce((sum, t) => sum + (t.actualTime || t.duration), 0);
  const progressPercent = totalPlannedTime > 0 ? Math.round((totalCompleted / totalPlannedTime) * 100) : 0;

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: '#ffffff',
      fontFamily: 'Inter, Segoe UI, sans-serif',
      direction: 'rtl'
    }}>
      {/* Header */}
      <div style={{
        background: '#2665a9',
        color: 'white',
        padding: '24px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <div style={{ maxWidth: '900px', margin: '0 auto' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
            <div>
              <h1 style={{ margin: '0 0 8px 0', fontSize: '28px', fontWeight: '600' }}>Task Flow</h1>
              <p style={{ margin: 0, opacity: 0.9, fontSize: '14px' }}>{today}</p>
            </div>
            <button
              onClick={() => setShowAddForm(!showAddForm)}
              style={{
                background: 'white',
                color: '#2665a9',
                border: 'none',
                borderRadius: '50%',
                width: '48px',
                height: '48px',
                fontSize: '24px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
                transition: 'transform 0.2s'
              }}
              onMouseEnter={e => e.target.style.transform = 'scale(1.05)'}
              onMouseLeave={e => e.target.style.transform = 'scale(1)'}
            >
              <Plus size={24} />
            </button>
          </div>
          <div style={{ display: 'flex', gap: '12px' }}>
            <button
              onClick={() => setCurrentView('today')}
              style={{
                background: currentView === 'today' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'today' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '15px',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <Calendar size={18} />
              היום
            </button>
            <button
              onClick={() => setCurrentView('history')}
              style={{
                background: currentView === 'history' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'history' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '15px',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <History size={18} />
              היסטוריה
            </button>
          </div>
        </div>
      </div>

      <div style={{ maxWidth: '900px', margin: '0 auto', padding: '24px' }}>
        {currentView === 'today' ? (
          <>
            {/* Add Task Form */}
            {showAddForm && (
          <div style={{
            background: '#e6f0fa',
            padding: '20px',
            borderRadius: '12px',
            marginBottom: '24px',
            boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
          }}>
            <h3 style={{ margin: '0 0 16px 0', color: '#2665a9' }}>משימה חדשה</h3>
            <input
              type="text"
              placeholder="שם המשימה"
              value={newTaskName}
              onChange={(e) => setNewTaskName(e.target.value)}
              style={{
                width: '100%',
                padding: '12px',
                border: '1px solid #ccc',
                borderRadius: '8px',
                marginBottom: '12px',
                fontSize: '15px',
                boxSizing: 'border-box'
              }}
            />
            <input
              type="number"
              placeholder="משך זמן (דקות)"
              value={newTaskDuration}
              onChange={(e) => setNewTaskDuration(e.target.value)}
              style={{
                width: '100%',
                padding: '12px',
                border: '1px solid #ccc',
                borderRadius: '8px',
                marginBottom: '12px',
                fontSize: '15px',
                boxSizing: 'border-box'
              }}
            />
            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={addTask}
                style={{
                  flex: 1,
                  background: '#2665a9',
                  color: 'white',
                  border: 'none',
                  padding: '12px',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '15px',
                  fontWeight: '500'
                }}
              >
                הוסף משימה
              </button>
              <button
                onClick={() => setShowAddForm(false)}
                style={{
                  flex: 1,
                  background: '#ddd',
                  color: '#333',
                  border: 'none',
                  padding: '12px',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '15px',
                  fontWeight: '500'
                }}
              >
                ביטול
              </button>
            </div>
          </div>
        )}

        {/* Open Tasks */}
        <div style={{ marginBottom: '32px' }}>
          <h2 style={{ 
            color: '#2665a9', 
            fontSize: '20px', 
            marginBottom: '16px',
            fontWeight: '600'
          }}>
            📋 משימות פתוחות
          </h2>
          {openTasks.length === 0 ? (
            <p style={{ color: '#666', textAlign: 'center', padding: '32px' }}>
              אין משימות פתוחות 🎉
            </p>
          ) : (
            openTasks.map((task, index) => (
              <div
                key={task.id}
                style={{
                  background: index === 0 ? '#d4e6f7' : '#e6f0fa',
                  padding: '16px',
                  borderRadius: '12px',
                  marginBottom: '12px',
                  border: index === 0 ? '3px solid #2665a9' : '1px solid #cce0f5',
                  boxShadow: index === 0 ? '0 4px 12px rgba(38,101,169,0.25)' : '0 2px 4px rgba(0,0,0,0.05)',
                  transition: 'all 0.2s',
                  position: 'relative'
                }}
              >
                {index === 0 && (
                  <div style={{
                    position: 'absolute',
                    top: '-12px',
                    right: '16px',
                    background: '#2665a9',
                    color: 'white',
                    padding: '4px 16px',
                    borderRadius: '12px',
                    fontSize: '13px',
                    fontWeight: '600',
                    boxShadow: '0 2px 6px rgba(0,0,0,0.2)'
                  }}>
                    🎯 עכשיו
                  </div>
                )}
                {editingTask === task.id ? (
                  <div>
                    <input
                      type="text"
                      value={editName}
                      onChange={(e) => setEditName(e.target.value)}
                      style={{
                        width: '100%',
                        padding: '10px',
                        border: '1px solid #ccc',
                        borderRadius: '6px',
                        marginBottom: '8px',
                        fontSize: '15px',
                        boxSizing: 'border-box'
                      }}
                      placeholder="שם המשימה"
                    />
                    <div style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
                      <input
                        type="number"
                        value={editDuration}
                        onChange={(e) => setEditDuration(e.target.value)}
                        style={{
                          flex: 1,
                          padding: '10px',
                          border: '1px solid #ccc',
                          borderRadius: '6px',
                          fontSize: '15px',
                          boxSizing: 'border-box'
                        }}
                        placeholder="זמן משוער (דקות)"
                      />
                      <input
                        type="number"
                        value={editActualTime}
                        onChange={(e) => setEditActualTime(e.target.value)}
                        style={{
                          flex: 1,
                          padding: '10px',
                          border: '1px solid #ccc',
                          borderRadius: '6px',
                          fontSize: '15px',
                          boxSizing: 'border-box'
                        }}
                        placeholder="זמן בפועל (דקות)"
                      />
                    </div>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button
                        onClick={saveEdit}
                        style={{
                          flex: 1,
                          background: '#2665a9',
                          color: 'white',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: '500'
                        }}
                      >
                        שמור
                      </button>
                      <button
                        onClick={cancelEdit}
                        style={{
                          flex: 1,
                          background: '#ddd',
                          color: '#333',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: '500'
                        }}
                      >
                        ביטול
                      </button>
                    </div>
                  </div>
                ) : (
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, index)}
                    onDragOver={(e) => handleDragOver(e, index)}
                    onDragEnd={handleDragEnd}
                    style={{ cursor: 'move' }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <GripVertical size={20} color="#999" />
                      <div style={{
                        background: '#2665a9',
                        color: 'white',
                        borderRadius: '50%',
                        width: '28px',
                        height: '28px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '14px',
                        fontWeight: '600',
                        flexShrink: 0
                      }}>
                        {index + 1}
                      </div>
                      <input
                        type="checkbox"
                        checked={task.completed}
                        onChange={() => toggleTask(task.id)}
                        style={{
                          width: '22px',
                          height: '22px',
                          cursor: 'pointer',
                          accentColor: '#2665a9'
                        }}
                      />
                      <div style={{ flex: 1 }}>
                        <div style={{ 
                          fontSize: index === 0 ? '18px' : '16px', 
                          color: '#333',
                          fontWeight: index === 0 ? '600' : '400',
                          marginBottom: '4px'
                        }}>
                          {task.name}
                        </div>
                      </div>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px',
                        background: 'white',
                        padding: '6px 12px',
                        borderRadius: '20px',
                        fontSize: '14px',
                        color: '#2665a9',
                        fontWeight: '500'
                      }}>
                        <Clock size={16} />
                        {task.duration} דקות
                      </div>
                      <button
                        onClick={() => startEdit(task)}
                        style={{
                          background: 'white',
                          border: '1px solid #2665a9',
                          color: '#2665a9',
                          padding: '6px 12px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '13px',
                          fontWeight: '500'
                        }}
                      >
                        ערוך
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))
          )}
        </div>

        {/* Completed Tasks */}
        {completedTasks.length > 0 && (
          <div style={{ marginBottom: '32px' }}>
            <h2 style={{ 
              color: '#4caf50', 
              fontSize: '20px', 
              marginBottom: '16px',
              fontWeight: '600'
            }}>
              ✅ משימות שבוצעו
            </h2>
            {completedTasks.map(task => (
              <div
                key={task.id}
                style={{
                  background: '#f5f5f5',
                  padding: '16px',
                  borderRadius: '12px',
                  marginBottom: '12px',
                  border: '1px solid #e0e0e0'
                }}
              >
                {editingTask === task.id ? (
                  <div>
                    <input
                      type="text"
                      value={editName}
                      onChange={(e) => setEditName(e.target.value)}
                      style={{
                        width: '100%',
                        padding: '10px',
                        border: '1px solid #ccc',
                        borderRadius: '6px',
                        marginBottom: '8px',
                        fontSize: '15px',
                        boxSizing: 'border-box'
                      }}
                      placeholder="שם המשימה"
                    />
                    <div style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
                      <input
                        type="number"
                        value={editDuration}
                        onChange={(e) => setEditDuration(e.target.value)}
                        style={{
                          flex: 1,
                          padding: '10px',
                          border: '1px solid #ccc',
                          borderRadius: '6px',
                          fontSize: '15px',
                          boxSizing: 'border-box'
                        }}
                        placeholder="זמן משוער (דקות)"
                      />
                      <input
                        type="number"
                        value={editActualTime}
                        onChange={(e) => setEditActualTime(e.target.value)}
                        style={{
                          flex: 1,
                          padding: '10px',
                          border: '1px solid #ccc',
                          borderRadius: '6px',
                          fontSize: '15px',
                          boxSizing: 'border-box'
                        }}
                        placeholder="זמן בפועל (דקות)"
                      />
                    </div>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button
                        onClick={saveEdit}
                        style={{
                          flex: 1,
                          background: '#2665a9',
                          color: 'white',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: '500'
                        }}
                      >
                        שמור
                      </button>
                      <button
                        onClick={cancelEdit}
                        style={{
                          flex: 1,
                          background: '#ddd',
                          color: '#333',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: '500'
                        }}
                      >
                        ביטול
                      </button>
                    </div>
                  </div>
                ) : (
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                      style={{
                        width: '22px',
                        height: '22px',
                        cursor: 'pointer',
                        accentColor: '#4caf50'
                      }}
                    />
                    <Check size={20} color="#4caf50" />
                    <div style={{ flex: 1 }}>
                      <div style={{ 
                        fontSize: '16px', 
                        color: '#666',
                        textDecoration: 'line-through',
                        marginBottom: task.actualTime ? '4px' : 0
                      }}>
                        {task.name}
                      </div>
                      {task.actualTime && (
                        <div style={{ fontSize: '13px', color: '#4caf50', fontWeight: '500' }}>
                          זמן בפועל: {task.actualTime} דקות
                          {task.actualTime !== task.duration && (
                            <span style={{ marginRight: '8px', color: task.actualTime > task.duration ? '#ff9800' : '#4caf50' }}>
                              ({task.actualTime > task.duration ? '+' : ''}{task.actualTime - task.duration} מהמשוער)
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                    <div style={{
                      fontSize: '14px',
                      color: '#999',
                      padding: '4px 10px',
                      background: 'white',
                      borderRadius: '12px'
                    }}>
                      משוער: {task.duration} דק'
                    </div>
                    <button
                      onClick={() => startEdit(task)}
                      style={{
                        background: 'white',
                        border: '1px solid #999',
                        color: '#666',
                        padding: '6px 12px',
                        borderRadius: '6px',
                        cursor: 'pointer',
                        fontSize: '13px',
                        fontWeight: '500'
                      }}
                    >
                      ערוך
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        {/* Daily Summary */}
        <div style={{
          background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
          color: 'white',
          padding: '24px',
          borderRadius: '12px',
          boxShadow: '0 4px 12px rgba(38,101,169,0.2)'
        }}>
          <h2 style={{ 
            fontSize: '20px', 
            marginBottom: '16px',
            fontWeight: '600'
          }}>
            📊 סיכום יומי
          </h2>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
            <div>
              <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>
                סה״כ זמן מתוכנן
              </div>
              {editingTotalTime ? (
                <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
                  <input
                    type="number"
                    value={totalPlannedTime}
                    onChange={(e) => setTotalPlannedTime(parseInt(e.target.value) || 0)}
                    style={{
                      width: '80px',
                      padding: '8px',
                      border: 'none',
                      borderRadius: '6px',
                      fontSize: '18px',
                      fontWeight: '600'
                    }}
                  />
                  <button
                    onClick={() => setEditingTotalTime(false)}
                    style={{
                      background: 'white',
                      color: '#2665a9',
                      border: 'none',
                      padding: '6px 12px',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '13px',
                      fontWeight: '500'
                    }}
                  >
                    שמור
                  </button>
                </div>
              ) : (
                <div 
                  onClick={() => setEditingTotalTime(true)}
                  style={{ 
                    fontSize: '24px', 
                    fontWeight: '600',
                    cursor: 'pointer',
                    display: 'inline-block',
                    padding: '4px 8px',
                    borderRadius: '6px',
                    transition: 'background 0.2s'
                  }}
                  onMouseEnter={e => e.target.style.background = 'rgba(255,255,255,0.1)'}
                  onMouseLeave={e => e.target.style.background = 'transparent'}
                >
                  {totalPlannedTime} דקות ✏️
                </div>
              )}
            </div>
            <div>
              <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>
                סה״כ זמן שבוצע
              </div>
              <div style={{ fontSize: '24px', fontWeight: '600' }}>
                {totalCompleted} דקות
              </div>
            </div>
          </div>
          <div style={{ marginTop: '16px' }}>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              fontSize: '14px',
              marginBottom: '8px'
            }}>
              <span>התקדמות</span>
              <span>{progressPercent}%</span>
            </div>
            <div style={{
              background: 'rgba(255,255,255,0.3)',
              borderRadius: '10px',
              height: '20px',
              overflow: 'hidden'
            }}>
              <div style={{
                background: 'white',
                height: '100%',
                width: `${progressPercent}%`,
                transition: 'width 0.5s ease'
              }} />
            </div>
          </div>
        </div>
          </>
        ) : (
          <div>
            <h2 style={{ 
              color: '#2665a9', 
              fontSize: '24px', 
              marginBottom: '24px',
              fontWeight: '600'
            }}>
              📜 היסטוריית ימים קודמים
            </h2>
            {history.length === 0 ? (
              <p style={{ textAlign: 'center', color: '#666', padding: '48px' }}>
                עדיין אין היסטוריה. סיים משימות כדי לראות אותן כאן! 📝
              </p>
            ) : (
              history.map((day, index) => (
                <div key={index} style={{
                  background: '#f8f9fa',
                  padding: '24px',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  border: '1px solid #e0e0e0'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '16px',
                    paddingBottom: '12px',
                    borderBottom: '2px solid #2665a9'
                  }}>
                    <h3 style={{ margin: 0, color: '#2665a9', fontSize: '18px', fontWeight: '600' }}>
                      📅 {new Date(day.date).toLocaleDateString('he-IL', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </h3>
                    <div style={{ fontSize: '14px', color: '#666' }}>
                      {day.completedTasks.length} משימות הושלמו
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '16px' }}>
                    {day.completedTasks.map(task => (
                      <div key={task.id} style={{
                        background: 'white',
                        padding: '12px',
                        borderRadius: '8px',
                        marginBottom: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px'
                      }}>
                        <Check size={18} color="#4caf50" />
                        <div style={{ flex: 1, fontSize: '15px', color: '#333' }}>
                          {task.name}
                        </div>
                        <div style={{ fontSize: '13px', color: '#666' }}>
                          {task.actualTime || task.duration} דקות
                        </div>
                      </div>
                    ))}
                  </div>

                  <div style={{
                    background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
                    color: 'white',
                    padding: '16px',
                    borderRadius: '8px',
                    display: 'grid',
                    gridTemplateColumns: '1fr 1fr',
                    gap: '16px'
                  }}>
                    <div>
                      <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                        זמן מתוכנן
                      </div>
                      <div style={{ fontSize: '20px', fontWeight: '600' }}>
                        {day.totalPlanned} דקות
                      </div>
                    </div>
                    <div>
                      <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                        זמן בפועל
                      </div>
                      <div style={{ fontSize: '20px', fontWeight: '600' }}>
                        {day.totalCompleted} דקות
                      </div>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
}
















########################################3

import React, { useState, useEffect } from 'react';
import { Plus, GripVertical, Check, Clock, History, Calendar, Play, Pause, Square } from 'lucide-react';

export default function TaskFlow() {
  const [currentView, setCurrentView] = useState('today');
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem('tasks');
    return saved ? JSON.parse(saved) : [
      { id: 1, name: 'Fill Diacopti Excel', duration: 30, completed: false, actualTime: null },
      { id: 2, name: 'Fill Elysia Excel', duration: 25, completed: false, actualTime: null },
      { id: 3, name: 'Fill Aeolos Athens Excel', duration: 20, completed: false, actualTime: null },
      { id: 4, name: 'Fill Naples Excel', duration: 20, completed: false, actualTime: null },
      { id: 5, name: 'Reset Elysia Excel against Anna\'s Excel', duration: 35, completed: false, actualTime: null },
      { id: 6, name: 'Prepare Pivot Table report for Elysia', duration: 40, completed: false, actualTime: null },
      { id: 7, name: 'Make final payments in all banks', duration: 30, completed: false, actualTime: null },
      { id: 8, name: 'Improve Diacopti Pivot Table (graphs)', duration: 45, completed: false, actualTime: null }
    ];
  });
  const [history, setHistory] = useState(() => {
    const saved = localStorage.getItem('history');
    return saved ? JSON.parse(saved) : [];
  });
  const [lastSaveDate, setLastSaveDate] = useState(() => {
    return localStorage.getItem('lastSaveDate') || new Date().toDateString();
  });
  const [showAddForm, setShowAddForm] = useState(false);
  const [newTaskName, setNewTaskName] = useState('');
  const [newTaskDuration, setNewTaskDuration] = useState('');
  const [draggedTask, setDraggedTask] = useState(null);
  const [editingTask, setEditingTask] = useState(null);
  const [editName, setEditName] = useState('');
  const [editDuration, setEditDuration] = useState('');
  const [editActualTime, setEditActualTime] = useState('');
  const [editingTotalTime, setEditingTotalTime] = useState(false);
  const [totalPlannedTime, setTotalPlannedTime] = useState(() => {
    const saved = localStorage.getItem('totalPlannedTime');
    return saved ? parseInt(saved) : 120;
  });
  const [tempTotalTime, setTempTotalTime] = useState(120);
  const [timerTask, setTimerTask] = useState(null);
  const [timerSeconds, setTimerSeconds] = useState(0);
  const [timerRunning, setTimerRunning] = useState(false);
  const [selectedHistoryDate, setSelectedHistoryDate] = useState(null);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  useEffect(() => {
    localStorage.setItem('history', JSON.stringify(history));
  }, [history]);

  useEffect(() => {
    localStorage.setItem('totalPlannedTime', totalPlannedTime.toString());
  }, [totalPlannedTime]);

  useEffect(() => {
    const currentDate = new Date().toDateString();
    if (currentDate !== lastSaveDate) {
      const completedToday = tasks.filter(t => t.completed);
      if (completedToday.length > 0) {
        const dayRecord = {
          date: lastSaveDate,
          completedTasks: completedToday,
          totalPlanned: totalPlannedTime,
          totalCompleted: completedToday.reduce((sum, t) => sum + (t.actualTime || t.duration), 0)
        };
        setHistory([dayRecord, ...history]);
      }
      const incompleteTasks = tasks.filter(t => !t.completed);
      setTasks(incompleteTasks);
      setLastSaveDate(currentDate);
      localStorage.setItem('lastSaveDate', currentDate);
    }
  }, [tasks, lastSaveDate, history, totalPlannedTime]);

  useEffect(() => {
    let interval;
    if (timerRunning) {
      interval = setInterval(() => {
        setTimerSeconds(prev => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [timerRunning]);

  const today = new Date().toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const addTask = () => {
    if (newTaskName.trim() && newTaskDuration) {
      const newTask = {
        id: Date.now(),
        name: newTaskName,
        duration: parseInt(newTaskDuration),
        completed: false,
        actualTime: null
      };
      setTasks([...tasks, newTask]);
      setNewTaskName('');
      setNewTaskDuration('');
      setShowAddForm(false);
    }
  };

  const startEdit = (task) => {
    setEditingTask(task.id);
    setEditName(task.name);
    setEditDuration(task.duration.toString());
    setEditActualTime(task.actualTime ? task.actualTime.toString() : '');
  };

  const saveEdit = () => {
    if (editingTask && editName.trim() && editDuration) {
      setTasks(tasks.map(task => 
        task.id === editingTask 
          ? { 
              ...task, 
              name: editName, 
              duration: parseInt(editDuration),
              actualTime: editActualTime ? parseInt(editActualTime) : task.actualTime
            }
          : task
      ));
      setEditingTask(null);
      setEditName('');
      setEditDuration('');
      setEditActualTime('');
    }
  };

  const cancelEdit = () => {
    setEditingTask(null);
    setEditName('');
    setEditDuration('');
    setEditActualTime('');
  };

  const handleDragStart = (e, index) => {
    setDraggedTask(index);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e, index) => {
    e.preventDefault();
    if (draggedTask === null || draggedTask === index) return;
    
    const openTasks = tasks.filter(t => !t.completed);
    const draggedItem = openTasks[draggedTask];
    const newOpenTasks = openTasks.filter((_, i) => i !== draggedTask);
    newOpenTasks.splice(index, 0, draggedItem);
    
    const completedTasks = tasks.filter(t => t.completed);
    setTasks([...newOpenTasks, ...completedTasks]);
    setDraggedTask(index);
  };

  const handleDragEnd = () => {
    setDraggedTask(null);
  };

  const startTimer = (taskId) => {
    setTimerTask(taskId);
    setTimerSeconds(0);
    setTimerRunning(true);
  };

  const pauseTimer = () => {
    setTimerRunning(false);
  };

  const resumeTimer = () => {
    setTimerRunning(true);
  };

  const stopTimer = () => {
    if (timerTask) {
      const minutes = Math.round(timerSeconds / 60);
      setTasks(tasks.map(task => 
        task.id === timerTask ? { ...task, actualTime: minutes } : task
      ));
    }
    setTimerTask(null);
    setTimerSeconds(0);
    setTimerRunning(false);
  };

  const formatTime = (seconds) => {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getCalendarDays = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    
    const days = [];
    for (let i = 1; i <= lastDay.getDate(); i++) {
      const date = new Date(currentYear, currentMonth, i);
      const dateStr = date.toDateString();
      const hasHistory = history.some(h => h.date === dateStr);
      days.push({ date, dateStr, hasHistory });
    }
    
    return { days, firstDay: firstDay.getDay() };
  };

  const openTasks = tasks.filter(t => !t.completed);
  const completedTasks = tasks.filter(t => t.completed);
  
  const totalCompleted = completedTasks.reduce((sum, t) => sum + (t.actualTime || t.duration), 0);
  const progressPercent = totalPlannedTime > 0 ? Math.round((totalCompleted / totalPlannedTime) * 100) : 0;

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: '#ffffff',
      fontFamily: 'Inter, Segoe UI, sans-serif'
    }}>
      {/* Header */}
      <div style={{
        background: '#2665a9',
        color: 'white',
        padding: '24px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <div style={{ maxWidth: '900px', margin: '0 auto' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
            <div>
              <h1 style={{ margin: '0 0 8px 0', fontSize: '28px', fontWeight: '600' }}>Task Flow</h1>
              <p style={{ margin: 0, opacity: 0.9, fontSize: '14px' }}>{today}</p>
            </div>
            <button
              onClick={() => setShowAddForm(!showAddForm)}
              style={{
                background: 'white',
                color: '#2665a9',
                border: 'none',
                borderRadius: '50%',
                width: '48px',
                height: '48px',
                fontSize: '24px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
                transition: 'transform 0.2s'
              }}
              onMouseEnter={e => e.target.style.transform = 'scale(1.05)'}
              onMouseLeave={e => e.target.style.transform = 'scale(1)'}
            >
              <Plus size={24} />
            </button>
          </div>
          <div style={{ display: 'flex', gap: '12px' }}>
            <button
              onClick={() => setCurrentView('today')}
              style={{
                background: currentView === 'today' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'today' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '15px',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <Calendar size={18} />
              Today
            </button>
            <button
              onClick={() => setCurrentView('history')}
              style={{
                background: currentView === 'history' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'history' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '15px',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <History size={18} />
              History
            </button>
          </div>
        </div>
      </div>

      <div style={{ maxWidth: '900px', margin: '0 auto', padding: '24px' }}>
        {currentView === 'today' ? (
          <>
            {/* Add Task Form */}
            {showAddForm && (
              <div style={{
                background: '#e6f0fa',
                padding: '20px',
                borderRadius: '12px',
                marginBottom: '24px',
                boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
              }}>
                <h3 style={{ margin: '0 0 16px 0', color: '#2665a9' }}>New Task</h3>
                <input
                  type="text"
                  placeholder="Task name"
                  value={newTaskName}
                  onChange={(e) => setNewTaskName(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    marginBottom: '12px',
                    fontSize: '15px',
                    boxSizing: 'border-box'
                  }}
                />
                <input
                  type="number"
                  placeholder="Duration (minutes)"
                  value={newTaskDuration}
                  onChange={(e) => setNewTaskDuration(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    marginBottom: '12px',
                    fontSize: '15px',
                    boxSizing: 'border-box'
                  }}
                />
                <div style={{ display: 'flex', gap: '12px' }}>
                  <button
                    onClick={addTask}
                    style={{
                      flex: 1,
                      background: '#2665a9',
                      color: 'white',
                      border: 'none',
                      padding: '12px',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      fontSize: '15px',
                      fontWeight: '500'
                    }}
                  >
                    Add Task
                  </button>
                  <button
                    onClick={() => setShowAddForm(false)}
                    style={{
                      flex: 1,
                      background: '#ddd',
                      color: '#333',
                      border: 'none',
                      padding: '12px',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      fontSize: '15px',
                      fontWeight: '500'
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}

            {/* Timer Display */}
            {timerTask && (
              <div style={{
                background: '#ffd700',
                padding: '20px',
                borderRadius: '12px',
                marginBottom: '24px',
                boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between'
              }}>
                <div>
                  <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '4px' }}>
                    ⏱️ Timer Running
                  </div>
                  <div style={{ fontSize: '13px', color: '#666' }}>
                    {tasks.find(t => t.id === timerTask)?.name}
                  </div>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{ fontSize: '32px', fontWeight: '700', fontFamily: 'monospace' }}>
                    {formatTime(timerSeconds)}
                  </div>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    {timerRunning ? (
                      <button
                        onClick={pauseTimer}
                        style={{
                          background: '#ff9800',
                          color: 'white',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '8px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px'
                        }}
                      >
                        <Pause size={18} />
                        Pause
                      </button>
                    ) : (
                      <button
                        onClick={resumeTimer}
                        style={{
                          background: '#4caf50',
                          color: 'white',
                          border: 'none',
                          padding: '10px',
                          borderRadius: '8px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px'
                        }}
                      >
                        <Play size={18} />
                        Resume
                      </button>
                    )}
                    <button
                      onClick={stopTimer}
                      style={{
                        background: '#f44336',
                        color: 'white',
                        border: 'none',
                        padding: '10px',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px'
                      }}
                    >
                      <Square size={18} />
                      Stop
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Open Tasks */}
            <div style={{ marginBottom: '32px' }}>
              <h2 style={{ 
                color: '#2665a9', 
                fontSize: '20px', 
                marginBottom: '16px',
                fontWeight: '600'
              }}>
                📋 Open Tasks
              </h2>
              {openTasks.length === 0 ? (
                <p style={{ color: '#666', textAlign: 'center', padding: '32px' }}>
                  No open tasks 🎉
                </p>
              ) : (
                openTasks.map((task, index) => (
                  <div
                    key={task.id}
                    style={{
                      background: index === 0 ? '#d4e6f7' : '#e6f0fa',
                      padding: '16px',
                      borderRadius: '12px',
                      marginBottom: '12px',
                      border: index === 0 ? '3px solid #2665a9' : '1px solid #cce0f5',
                      boxShadow: index === 0 ? '0 4px 12px rgba(38,101,169,0.25)' : '0 2px 4px rgba(0,0,0,0.05)',
                      transition: 'all 0.2s',
                      position: 'relative'
                    }}
                  >
                    {index === 0 && (
                      <div style={{
                        position: 'absolute',
                        top: '-12px',
                        left: '16px',
                        background: '#2665a9',
                        color: 'white',
                        padding: '4px 16px',
                        borderRadius: '12px',
                        fontSize: '13px',
                        fontWeight: '600',
                        boxShadow: '0 2px 6px rgba(0,0,0,0.2)'
                      }}>
                        🎯 Now
                      </div>
                    )}
                    {editingTask === task.id ? (
                      <div>
                        <input
                          type="text"
                          value={editName}
                          onChange={(e) => setEditName(e.target.value)}
                          style={{
                            width: '100%',
                            padding: '10px',
                            border: '1px solid #ccc',
                            borderRadius: '6px',
                            marginBottom: '8px',
                            fontSize: '15px',
                            boxSizing: 'border-box'
                          }}
                          placeholder="Task name"
                        />
                        <div style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
                          <input
                            type="number"
                            value={editDuration}
                            onChange={(e) => setEditDuration(e.target.value)}
                            style={{
                              flex: 1,
                              padding: '10px',
                              border: '1px solid #ccc',
                              borderRadius: '6px',
                              fontSize: '15px',
                              boxSizing: 'border-box'
                            }}
                            placeholder="Estimated time (min)"
                          />
                          <input
                            type="number"
                            value={editActualTime}
                            onChange={(e) => setEditActualTime(e.target.value)}
                            style={{
                              flex: 1,
                              padding: '10px',
                              border: '1px solid #ccc',
                              borderRadius: '6px',
                              fontSize: '15px',
                              boxSizing: 'border-box'
                            }}
                            placeholder="Actual time (min)"
                          />
                        </div>
                        <div style={{ display: 'flex', gap: '8px' }}>
                          <button
                            onClick={saveEdit}
                            style={{
                              flex: 1,
                              background: '#2665a9',
                              color: 'white',
                              border: 'none',
                              padding: '10px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '14px',
                              fontWeight: '500'
                            }}
                          >
                            Save
                          </button>
                          <button
                            onClick={cancelEdit}
                            style={{
                              flex: 1,
                              background: '#ddd',
                              color: '#333',
                              border: 'none',
                              padding: '10px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '14px',
                              fontWeight: '500'
                            }}
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div
                        draggable
                        onDragStart={(e) => handleDragStart(e, index)}
                        onDragOver={(e) => handleDragOver(e, index)}
                        onDragEnd={handleDragEnd}
                        style={{ cursor: 'move' }}
                      >
                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                          <GripVertical size={20} color="#999" />
                          <div style={{
                            background: '#2665a9',
                            color: 'white',
                            borderRadius: '50%',
                            width: '28px',
                            height: '28px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: '14px',
                            fontWeight: '600',
                            flexShrink: 0
                          }}>
                            {index + 1}
                          </div>
                          <input
                            type="checkbox"
                            checked={task.completed}
                            onChange={() => toggleTask(task.id)}
                            style={{
                              width: '22px',
                              height: '22px',
                              cursor: 'pointer',
                              accentColor: '#2665a9'
                            }}
                          />
                          <div style={{ flex: 1 }}>
                            <div style={{ 
                              fontSize: index === 0 ? '18px' : '16px', 
                              color: '#333',
                              fontWeight: index === 0 ? '600' : '400',
                              marginBottom: '4px'
                            }}>
                              {task.name}
                            </div>
                          </div>
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '6px',
                            background: 'white',
                            padding: '6px 12px',
                            borderRadius: '20px',
                            fontSize: '14px',
                            color: '#2665a9',
                            fontWeight: '500'
                          }}>
                            <Clock size={16} />
                            {task.duration} min
                          </div>
                          {timerTask === task.id ? (
                            <div style={{
                              background: '#ffd700',
                              padding: '6px 12px',
                              borderRadius: '6px',
                              fontSize: '13px',
                              fontWeight: '600'
                            }}>
                              ⏱️ Timing
                            </div>
                          ) : (
                            <button
                              onClick={() => startTimer(task.id)}
                              style={{
                                background: '#4caf50',
                                color: 'white',
                                border: 'none',
                                padding: '6px 12px',
                                borderRadius: '6px',
                                cursor: 'pointer',
                                fontSize: '13px',
                                fontWeight: '500',
                                display: 'flex',
                                alignItems: 'center',
                                gap: '4px'
                              }}
                            >
                              <Play size={14} />
                              Start
                            </button>
                          )}
                          <button
                            onClick={() => startEdit(task)}
                            style={{
                              background: 'white',
                              border: '1px solid #2665a9',
                              color: '#2665a9',
                              padding: '6px 12px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '13px',
                              fontWeight: '500'
                            }}
                          >
                            Edit
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>

            {/* Completed Tasks */}
            {completedTasks.length > 0 && (
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ 
                  color: '#4caf50', 
                  fontSize: '20px', 
                  marginBottom: '16px',
                  fontWeight: '600'
                }}>
                  ✅ Completed Tasks
                </h2>
                {completedTasks.map(task => (
                  <div
                    key={task.id}
                    style={{
                      background: '#f5f5f5',
                      padding: '16px',
                      borderRadius: '12px',
                      marginBottom: '12px',
                      border: '1px solid #e0e0e0'
                    }}
                  >
                    {editingTask === task.id ? (
                      <div>
                        <input
                          type="text"
                          value={editName}
                          onChange={(e) => setEditName(e.target.value)}
                          style={{
                            width: '100%',
                            padding: '10px',
                            border: '1px solid #ccc',
                            borderRadius: '6px',
                            marginBottom: '8px',
                            fontSize: '15px',
                            boxSizing: 'border-box'
                          }}
                          placeholder="Task name"
                        />
                        <div style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
                          <input
                            type="number"
                            value={editDuration}
                            onChange={(e) => setEditDuration(e.target.value)}
                            style={{
                              flex: 1,
                              padding: '10px',
                              border: '1px solid #ccc',
                              borderRadius: '6px',
                              fontSize: '15px',
                              boxSizing: 'border-box'
                            }}
                            placeholder="Estimated time (min)"
                          />
                          <input
                            type="number"
                            value={editActualTime}
                            onChange={(e) => setEditActualTime(e.target.value)}
                            style={{
                              flex: 1,
                              padding: '10px',
                              border: '1px solid #ccc',
                              borderRadius: '6px',
                              fontSize: '15px',
                              boxSizing: 'border-box'
                            }}
                            placeholder="Actual time (min)"
                          />
                        </div>
                        <div style={{ display: 'flex', gap: '8px' }}>
                          <button
                            onClick={saveEdit}
                            style={{
                              flex: 1,
                              background: '#2665a9',
                              color: 'white',
                              border: 'none',
                              padding: '10px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '14px',
                              fontWeight: '500'
                            }}
                          >
                            Save
                          </button>
                          <button
                            onClick={cancelEdit}
                            style={{
                              flex: 1,
                              background: '#ddd',
                              color: '#333',
                              border: 'none',
                              padding: '10px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '14px',
                              fontWeight: '500'
                            }}
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                        <input
                          type="checkbox"
                          checked={task.completed}
                          onChange={() => toggleTask(task.id)}
                          style={{
                            width: '22px',
                            height: '22px',
                            cursor: 'pointer',
                            accentColor: '#4caf50'
                          }}
                        />
                        <Check size={20} color="#4caf50" />
                        <div style={{ flex: 1 }}>
                          <div style={{ 
                            fontSize: '16px', 
                            color: '#666',
                            textDecoration: 'line-through',
                            marginBottom: task.actualTime ? '4px' : 0
                          }}>
                            {task.name}
                          </div>
                          {task.actualTime && (
                            <div style={{ fontSize: '13px', color: '#4caf50', fontWeight: '500' }}>
                              Actual time: {task.actualTime} min
                              {task.actualTime !== task.duration && (
                                <span style={{ marginLeft: '8px', color: task.actualTime > task.duration ? '#ff9800' : '#4caf50' }}>
                                  ({task.actualTime > task.duration ? '+' : ''}{task.actualTime - task.duration} vs estimated)
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                        <div style={{
                          fontSize: '14px',
                          color: '#999',
                          padding: '4px 10px',
                          background: 'white',
                          borderRadius: '12px'
                        }}>
                          Est: {task.duration} min
                        </div>
                        <button
                          onClick={() => startEdit(task)}
                          style={{
                            background: 'white',
                            border: '1px solid #999',
                            color: '#666',
                            padding: '6px 12px',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            fontSize: '13px',
                            fontWeight: '500'
                          }}
                        >
                          Edit
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            {/* Daily Summary */}
            <div style={{
              background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
              color: 'white',
              padding: '24px',
              borderRadius: '12px',
              boxShadow: '0 4px 12px rgba(38,101,169,0.2)'
            }}>
              <h2 style={{ 
                fontSize: '20px', 
                marginBottom: '16px',
                fontWeight: '600'
              }}>
                📊 Daily Summary
              </h2>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>
                    Total Planned Time
                  </div>
                  {editingTotalTime ? (
                    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
                      <input
                        type="number"
                        value={tempTotalTime}
                        onChange={(e) => setTempTotalTime(parseInt(e.target.value) || 0)}
                        style={{
                          width: '100px',
                          padding: '8px',
                          border: 'none',
                          borderRadius: '6px',
                          fontSize: '18px',
                          fontWeight: '600'
                        }}
                      />
                      <span style={{ fontSize: '16px' }}>min</span>
                      <button
                        onClick={() => {
                          setTotalPlannedTime(tempTotalTime);
                          setEditingTotalTime(false);
                        }}
                        style={{
                          background: 'white',
                          color: '#2665a9',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '13px',
                          fontWeight: '500'
                        }}
                      >
                        Save
                      </button>
                    </div>
                  ) : (
                    <div 
                      onClick={() => {
                        setTempTotalTime(totalPlannedTime);
                        setEditingTotalTime(true);
                      }}
                      style={{ 
                        fontSize: '24px', 
                        fontWeight: '600',
                        cursor: 'pointer',
                        display: 'inline-block',
                        padding: '4px 8px',
                        borderRadius: '6px',
                        transition: 'background 0.2s'
                      }}
                      onMouseEnter={e => e.target.style.background = 'rgba(255,255,255,0.1)'}
                      onMouseLeave={e => e.target.style.background = 'transparent'}
                    >
                      {totalPlannedTime} min ✏️
                    </div>
                  )}
                </div>
                <div>
                  <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>
                    Total Completed Time
                  </div>
                  <div style={{ fontSize: '24px', fontWeight: '600' }}>
                    {totalCompleted} min
                  </div>
                </div>
              </div>
              <div style={{ marginTop: '16px' }}>
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  fontSize: '14px',
                  marginBottom: '8px'
                }}>
                  <span>Progress</span>
                  <span>{progressPercent}%</span>
                </div>
                <div style={{
                  background: 'rgba(255,255,255,0.3)',
                  borderRadius: '10px',
                  height: '20px',
                  overflow: 'hidden'
                }}>
                  <div style={{
                    background: 'white',
                    height: '100%',
                    width: `${progressPercent}%`,
                    transition: 'width 0.5s ease'
                  }} />
                </div>
              </div>
            </div>
          </>
        ) : (
          <div>
            <h2 style={{ 
              color: '#2665a9', 
              fontSize: '24px', 
              marginBottom: '24px',
              fontWeight: '600'
            }}>
              📜 History
            </h2>
            
            {/* Calendar */}
            <div style={{
              background: '#f8f9fa',
              padding: '24px',
              borderRadius: '12px',
              marginBottom: '24px',
              border: '1px solid #e0e0e0'
            }}>
              <h3 style={{ margin: '0 0 16px 0', color: '#2665a9', fontSize: '18px' }}>
                {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h3>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(7, 1fr)',
                gap: '8px',
                marginBottom: '8px'
              }}>
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} style={{
                    textAlign: 'center',
                    fontSize: '12px',
                    fontWeight: '600',
                    color: '#666',
                    padding: '8px'
                  }}>
                    {day}
                  </div>
                ))}
              </div>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(7, 1fr)',
                gap: '8px'
              }}>
                {Array(getCalendarDays().firstDay).fill(null).map((_, i) => (
                  <div key={`empty-${i}`} style={{ padding: '8px' }} />
                ))}
                {getCalendarDays().days.map(({ date, dateStr, hasHistory }) => {
                  const isToday = dateStr === new Date().toDateString();
                  const isSelected = dateStr === selectedHistoryDate;
                  return (
                    <div
                      key={dateStr}
                      onClick={() => hasHistory && setSelectedHistoryDate(dateStr)}
                      style={{
                        padding: '12px',
                        textAlign: 'center',
                        borderRadius: '8px',
                        cursor: hasHistory ? 'pointer' : 'default',
                        background: isSelected ? '#2665a9' : hasHistory ? '#4caf50' : isToday ? '#e6f0fa' : 'white',
                        color: isSelected || hasHistory ? 'white' : '#333',
                        fontWeight: isToday || hasHistory ? '600' : '400',
                        border: isToday ? '2px solid #2665a9' : '1px solid #e0e0e0',
                        transition: 'all 0.2s',
                        fontSize: '14px'
                      }}
                      onMouseEnter={e => {
                        if (hasHistory && !isSelected) {
                          e.target.style.transform = 'scale(1.05)';
                          e.target.style.boxShadow = '0 2px 8px rgba(0,0,0,0.15)';
                        }
                      }}
                      onMouseLeave={e => {
                        e.target.style.transform = 'scale(1)';
                        e.target.style.boxShadow = 'none';
                      }}
                    >
                      {date.getDate()}
                    </div>
                  );
                })}
              </div>
              <div style={{ marginTop: '16px', display: 'flex', gap: '16px', fontSize: '13px', color: '#666' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{ width: '16px', height: '16px', background: '#4caf50', borderRadius: '4px' }} />
                  <span>Worked</span>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{ width: '16px', height: '16px', background: '#e6f0fa', border: '2px solid #2665a9', borderRadius: '4px' }} />
                  <span>Today</span>
                </div>
              </div>
            </div>

            {/* Selected Day Details */}
            {selectedHistoryDate && (() => {
              const dayData = history.find(h => h.date === selectedHistoryDate);
              return dayData && (
                <div style={{
                  background: '#f8f9fa',
                  padding: '24px',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  border: '1px solid #e0e0e0'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '16px',
                    paddingBottom: '12px',
                    borderBottom: '2px solid #2665a9'
                  }}>
                    <h3 style={{ margin: 0, color: '#2665a9', fontSize: '18px', fontWeight: '600' }}>
                      📅 {new Date(dayData.date).toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </h3>
                    <div style={{ fontSize: '14px', color: '#666' }}>
                      {dayData.completedTasks.length} tasks completed
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '16px' }}>
                    {dayData.completedTasks.map(task => (
                      <div key={task.id} style={{
                        background: 'white',
                        padding: '12px',
                        borderRadius: '8px',
                        marginBottom: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px'
                      }}>
                        <Check size={18} color="#4caf50" />
                        <div style={{ flex: 1, fontSize: '15px', color: '#333' }}>
                          {task.name}
                        </div>
                        <div style={{ fontSize: '13px', color: '#666' }}>
                          {task.actualTime || task.duration} min
                        </div>
                      </div>
                    ))}
                  </div>

                  <div style={{
                    background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
                    color: 'white',
                    padding: '16px',
                    borderRadius: '8px',
                    display: 'grid',
                    gridTemplateColumns: '1fr 1fr',
                    gap: '16px'
                  }}>
                    <div>
                      <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                        Planned Time
                      </div>
                      <div style={{ fontSize: '20px', fontWeight: '600' }}>
                        {dayData.totalPlanned} min
                      </div>
                    </div>
                    <div>
                      <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                        Actual Time
                      </div>
                      <div style={{ fontSize: '20px', fontWeight: '600' }}>
                        {dayData.totalCompleted} min
                      </div>
                    </div>
                  </div>
                </div>
              );
            })()}

            {/* All History */}
            {history.length === 0 ? (
              <p style={{ textAlign: 'center', color: '#666', padding: '48px' }}>
                No history yet. Complete tasks to see them here! 📝
              </p>
            ) : !selectedHistoryDate && (
              <div>
                <h3 style={{ color: '#2665a9', fontSize: '18px', marginBottom: '16px' }}>
                  All Days
                </h3>
                {history.map((day, index) => (
                  <div key={index} style={{
                    background: '#f8f9fa',
                    padding: '24px',
                    borderRadius: '12px',
                    marginBottom: '20px',
                    border: '1px solid #e0e0e0',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onClick={() => setSelectedHistoryDate(day.date)}
                  onMouseEnter={e => {
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
                  }}
                  onMouseLeave={e => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                  >
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      marginBottom: '16px',
                      paddingBottom: '12px',
                      borderBottom: '2px solid #2665a9'
                    }}>
                      <h3 style={{ margin: 0, color: '#2665a9', fontSize: '18px', fontWeight: '600' }}>
                        📅 {new Date(day.date).toLocaleDateString('en-US', { 
                          weekday: 'long', 
                          year: 'numeric', 
                          month: 'long', 
                          day: 'numeric' 
                        })}
                      </h3>
                      <div style={{ fontSize: '14px', color: '#666' }}>
                        {day.completedTasks.length} tasks completed
                      </div>
                    </div>
                    
                    <div style={{ marginBottom: '16px' }}>
                      {day.completedTasks.slice(0, 3).map(task => (
                        <div key={task.id} style={{
                          background: 'white',
                          padding: '12px',
                          borderRadius: '8px',
                          marginBottom: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '12px'
                        }}>
                          <Check size={18} color="#4caf50" />
                          <div style={{ flex: 1, fontSize: '15px', color: '#333' }}>
                            {task.name}
                          </div>
                          <div style={{ fontSize: '13px', color: '#666' }}>
                            {task.actualTime || task.duration} min
                          </div>
                        </div>
                      ))}
                      {day.completedTasks.length > 3 && (
                        <div style={{ textAlign: 'center', color: '#666', fontSize: '13px', marginTop: '8px' }}>
                          +{day.completedTasks.length - 3} more tasks
                        </div>
                      )}
                    </div>

                    <div style={{
                      background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
                      color: 'white',
                      padding: '16px',
                      borderRadius: '8px',
                      display: 'grid',
                      gridTemplateColumns: '1fr 1fr',
                      gap: '16px'
                    }}>
                      <div>
                        <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                          Planned Time
                        </div>
                        <div style={{ fontSize: '20px', fontWeight: '600' }}>
                          {day.totalPlanned} min
                        </div>
                      </div>
                      <div>
                        <div style={{ fontSize: '13px', opacity: 0.9, marginBottom: '4px' }}>
                          Actual Time
                        </div>
                        <div style={{ fontSize: '20px', fontWeight: '600' }}>
                          {day.totalCompleted} min
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}



#############################################################
import React, { useState, useEffect } from 'react';
import { Plus, GripVertical, Check, Clock, History, Calendar, Play, Pause, Square, Edit2, Trash2, X } from 'lucide-react';

export default function TaskFlow() {
  const [currentView, setCurrentView] = useState('today');
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem('tasks');
    return saved ? JSON.parse(saved) : [
      { id: 1, name: 'Fill Diacopti Excel', duration: 30, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 2, name: 'Fill Elysia Excel', duration: 25, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 3, name: 'Fill Aeolos Athens Excel', duration: 20, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 4, name: 'Fill Naples Excel', duration: 20, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 5, name: 'Reset Elysia Excel', duration: 35, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 6, name: 'Prepare Pivot Table report', duration: 40, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 7, name: 'Make final payments', duration: 30, completed: false, actualTime: null, completedDate: null, scheduledDate: null },
      { id: 8, name: 'Improve Diacopti Pivot Table', duration: 45, completed: false, actualTime: null, completedDate: null, scheduledDate: null }
    ];
  });
  
  const [showAddForm, setShowAddForm] = useState(false);
  const [newTaskName, setNewTaskName] = useState('');
  const [newTaskDuration, setNewTaskDuration] = useState('');
  const [newTaskScheduledDate, setNewTaskScheduledDate] = useState('');
  const [draggedTask, setDraggedTask] = useState(null);
  const [editingTask, setEditingTask] = useState(null);
  const [editName, setEditName] = useState('');
  const [editDuration, setEditDuration] = useState('');
  const [editActualTime, setEditActualTime] = useState('');
  const [editScheduledDate, setEditScheduledDate] = useState('');
  const [editCompletedDate, setEditCompletedDate] = useState('');
  const [editingTotalTime, setEditingTotalTime] = useState(false);
  const [totalPlannedTime, setTotalPlannedTime] = useState(() => {
    const saved = localStorage.getItem('totalPlannedTime');
    return saved ? parseInt(saved) : 120;
  });
  const [tempTotalTime, setTempTotalTime] = useState(120);
  const [timerTask, setTimerTask] = useState(null);
  const [timerSeconds, setTimerSeconds] = useState(0);
  const [timerRunning, setTimerRunning] = useState(false);
  const [selectedHistoryDate, setSelectedHistoryDate] = useState(null);
  const [editingHistoryDay, setEditingHistoryDay] = useState(null);
  const [calendarDateModal, setCalendarDateModal] = useState(null);
  const [quickTaskName, setQuickTaskName] = useState('');
  const [quickTaskDuration, setQuickTaskDuration] = useState('');

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  useEffect(() => {
    localStorage.setItem('totalPlannedTime', totalPlannedTime.toString());
  }, [totalPlannedTime]);

  useEffect(() => {
    let interval;
    if (timerRunning) {
      interval = setInterval(() => {
        setTimerSeconds(prev => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [timerRunning]);

  useEffect(() => {
    const todayStr = new Date().toDateString();
    const updatedTasks = tasks.map(task => {
      if (task.scheduledDate === todayStr && !task.completed) {
        return { ...task, scheduledDate: null };
      }
      return task;
    });
    if (JSON.stringify(updatedTasks) !== JSON.stringify(tasks)) {
      setTasks(updatedTasks);
    }
  }, []);

  const today = new Date().toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });

  const toggleTask = (id) => {
    const task = tasks.find(t => t.id === id);
    if (task) {
      const newCompleted = !task.completed;
      const completedDate = newCompleted ? new Date().toDateString() : null;
      
      setTasks(tasks.map(t => 
        t.id === id ? { ...t, completed: newCompleted, completedDate, scheduledDate: null } : t
      ));
    }
  };

  const deleteTask = (id) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      setTasks(tasks.filter(t => t.id !== id));
    }
  };

  const addTask = () => {
    if (newTaskName.trim() && newTaskDuration) {
      const newTask = {
        id: Date.now(),
        name: newTaskName,
        duration: parseInt(newTaskDuration),
        completed: false,
        actualTime: null,
        completedDate: null,
        scheduledDate: newTaskScheduledDate ? new Date(newTaskScheduledDate).toDateString() : null
      };
      setTasks([...tasks, newTask]);
      setNewTaskName('');
      setNewTaskDuration('');
      setNewTaskScheduledDate('');
      setShowAddForm(false);
    }
  };

  const addQuickTask = (dateStr) => {
    if (quickTaskName.trim() && quickTaskDuration) {
      const newTask = {
        id: Date.now(),
        name: quickTaskName,
        duration: parseInt(quickTaskDuration),
        completed: false,
        actualTime: null,
        completedDate: null,
        scheduledDate: dateStr
      };
      setTasks([...tasks, newTask]);
      setQuickTaskName('');
      setQuickTaskDuration('');
      setCalendarDateModal(null);
    }
  };

  const startEdit = (task) => {
    setEditingTask(task.id);
    setEditName(task.name);
    setEditDuration(task.duration.toString());
    setEditActualTime(task.actualTime ? task.actualTime.toString() : '');
    setEditScheduledDate(task.scheduledDate ? new Date(task.scheduledDate).toISOString().split('T')[0] : '');
    setEditCompletedDate(task.completedDate ? new Date(task.completedDate).toISOString().split('T')[0] : '');
  };

  const saveEdit = () => {
    if (editingTask && editName.trim() && editDuration) {
      setTasks(tasks.map(task => 
        task.id === editingTask 
          ? { 
              ...task, 
              name: editName, 
              duration: parseInt(editDuration),
              actualTime: editActualTime ? parseInt(editActualTime) : task.actualTime,
              scheduledDate: editScheduledDate ? new Date(editScheduledDate).toDateString() : task.scheduledDate,
              completedDate: editCompletedDate ? new Date(editCompletedDate).toDateString() : task.completedDate
            }
          : task
      ));
      setEditingTask(null);
      setEditName('');
      setEditDuration('');
      setEditActualTime('');
      setEditScheduledDate('');
      setEditCompletedDate('');
    }
  };

  const cancelEdit = () => {
    setEditingTask(null);
    setEditName('');
    setEditDuration('');
    setEditActualTime('');
    setEditScheduledDate('');
    setEditCompletedDate('');
  };

  const handleDragStart = (e, index) => {
    setDraggedTask(index);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e, index) => {
    e.preventDefault();
    if (draggedTask === null || draggedTask === index) return;
    
    const openTasks = getTodayOpenTasks();
    const draggedItem = openTasks[draggedTask];
    const newOpenTasks = openTasks.filter((_, i) => i !== draggedTask);
    newOpenTasks.splice(index, 0, draggedItem);
    
    const otherTasks = tasks.filter(t => t.completed || t.scheduledDate);
    const reorderedTasks = [...newOpenTasks, ...otherTasks];
    setTasks(reorderedTasks);
    setDraggedTask(index);
  };

  const handleDragEnd = () => {
    setDraggedTask(null);
  };

  const startTimer = (taskId) => {
    setTimerTask(taskId);
    setTimerSeconds(0);
    setTimerRunning(true);
  };

  const pauseTimer = () => {
    setTimerRunning(false);
  };

  const resumeTimer = () => {
    setTimerRunning(true);
  };

  const stopTimer = () => {
    if (timerTask) {
      const minutes = Math.round(timerSeconds / 60);
      setTasks(tasks.map(task => 
        task.id === timerTask ? { ...task, actualTime: minutes } : task
      ));
    }
    setTimerTask(null);
    setTimerSeconds(0);
    setTimerRunning(false);
  };

  const formatTime = (seconds) => {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const editHistoryTask = (taskId, field, value) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, [field]: value } : task
    ));
  };

  const deleteHistoryTask = (taskId) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      setTasks(tasks.filter(t => t.id !== taskId));
    }
  };

  const getHistoryByDate = () => {
    const historyMap = {};
    tasks.filter(t => t.completed && t.completedDate).forEach(task => {
      if (!historyMap[task.completedDate]) {
        historyMap[task.completedDate] = [];
      }
      historyMap[task.completedDate].push(task);
    });
    return historyMap;
  };

  const getScheduledByDate = () => {
    const scheduledMap = {};
    tasks.filter(t => !t.completed && t.scheduledDate).forEach(task => {
      if (!scheduledMap[task.scheduledDate]) {
        scheduledMap[task.scheduledDate] = [];
      }
      scheduledMap[task.scheduledDate].push(task);
    });
    return scheduledMap;
  };

  const getCalendarDays = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    
    const historyMap = getHistoryByDate();
    const scheduledMap = getScheduledByDate();
    const todayStr = new Date().toDateString();
    
    const days = [];
    for (let i = 1; i <= lastDay.getDate(); i++) {
      const date = new Date(currentYear, currentMonth, i);
      const dateStr = date.toDateString();
      const hasHistory = !!historyMap[dateStr];
      const hasScheduled = !!scheduledMap[dateStr];
      const isPast = date < new Date(todayStr);
      const isToday = dateStr === todayStr;
      days.push({ date, dateStr, hasHistory, hasScheduled, isPast, isToday });
    }
    
    return { days, firstDay: firstDay.getDay() };
  };

  const getTodayOpenTasks = () => {
    return tasks.filter(t => !t.completed && !t.scheduledDate);
  };

  const todayStr = new Date().toDateString();
  const openTasks = getTodayOpenTasks();
  const completedTodayTasks = tasks.filter(t => t.completed && t.completedDate === todayStr);
  
  const totalCompleted = completedTodayTasks.reduce((sum, t) => sum + (t.actualTime || t.duration), 0);
  const progressPercent = totalPlannedTime > 0 ? Math.round((totalCompleted / totalPlannedTime) * 100) : 0;

  const historyMap = getHistoryByDate();
  const scheduledMap = getScheduledByDate();
  const selectedDayTasks = selectedHistoryDate ? (historyMap[selectedHistoryDate] || []) : [];
  const selectedScheduledTasks = selectedHistoryDate ? (scheduledMap[selectedHistoryDate] || []) : [];

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: '#ffffff',
      fontFamily: 'Inter, Segoe UI, sans-serif'
    }}>
      <div style={{
        background: '#2665a9',
        color: 'white',
        padding: '24px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <div style={{ maxWidth: '900px', margin: '0 auto' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
            <div>
              <h1 style={{ margin: '0 0 8px 0', fontSize: '28px', fontWeight: '600' }}>Task Flow</h1>
              <p style={{ margin: 0, opacity: 0.9, fontSize: '14px' }}>{today}</p>
            </div>
            <button
              onClick={() => setShowAddForm(!showAddForm)}
              style={{
                background: 'white',
                color: '#2665a9',
                border: 'none',
                borderRadius: '50%',
                width: '48px',
                height: '48px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
              }}
            >
              <Plus size={24} />
            </button>
          </div>
          <div style={{ display: 'flex', gap: '12px' }}>
            <button
              onClick={() => {
                setCurrentView('today');
                setSelectedHistoryDate(null);
              }}
              style={{
                background: currentView === 'today' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'today' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <Calendar size={18} />
              Today
            </button>
            <button
              onClick={() => setCurrentView('history')}
              style={{
                background: currentView === 'history' ? 'white' : 'rgba(255,255,255,0.2)',
                color: currentView === 'history' ? '#2665a9' : 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <History size={18} />
              History
            </button>
          </div>
        </div>
      </div>

      <div style={{ maxWidth: '900px', margin: '0 auto', padding: '24px' }}>
        {currentView === 'today' ? (
          <>
            {showAddForm && (
              <div style={{
                background: '#e6f0fa',
                padding: '20px',
                borderRadius: '12px',
                marginBottom: '24px'
              }}>
                <h3 style={{ margin: '0 0 16px 0' }}>New Task</h3>
                <input
                  type="text"
                  placeholder="Task name"
                  value={newTaskName}
                  onChange={(e) => setNewTaskName(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    marginBottom: '12px',
                    boxSizing: 'border-box'
                  }}
                />
                <input
                  type="number"
                  placeholder="Duration (minutes)"
                  value={newTaskDuration}
                  onChange={(e) => setNewTaskDuration(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    marginBottom: '12px',
                    boxSizing: 'border-box'
                  }}
                />
                <input
                  type="date"
                  value={newTaskScheduledDate}
                  onChange={(e) => setNewTaskScheduledDate(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    marginBottom: '12px',
                    boxSizing: 'border-box'
                  }}
                />
                <div style={{ display: 'flex', gap: '12px' }}>
                  <button onClick={addTask} style={{
                    flex: 1,
                    background: '#2665a9',
                    color: 'white',
                    border: 'none',
                    padding: '12px',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}>
                    Add Task
                  </button>
                  <button onClick={() => setShowAddForm(false)} style={{
                    flex: 1,
                    background: '#ddd',
                    border: 'none',
                    padding: '12px',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}>
                    Cancel
                  </button>
                </div>
              </div>
            )}

            {timerTask && (
              <div style={{
                background: '#ffd700',
                padding: '20px',
                borderRadius: '12px',
                marginBottom: '24px',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <div>
                  <div style={{ fontWeight: '600' }}>⏱️ Timer Running</div>
                  <div style={{ fontSize: '13px', color: '#666' }}>
                    {tasks.find(t => t.id === timerTask)?.name}
                  </div>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{ fontSize: '32px', fontWeight: '700', fontFamily: 'monospace' }}>
                    {formatTime(timerSeconds)}
                  </div>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    {timerRunning ? (
                      <button onClick={pauseTimer} style={{
                        background: '#ff9800',
                        color: 'white',
                        border: 'none',
                        padding: '10px',
                        borderRadius: '8px',
                        cursor: 'pointer'
                      }}>
                        <Pause size={18} />
                      </button>
                    ) : (
                      <button onClick={resumeTimer} style={{
                        background: '#4caf50',
                        color: 'white',
                        border: 'none',
                        padding: '10px',
                        borderRadius: '8px',
                        cursor: 'pointer'
                      }}>
                        <Play size={18} />
                      </button>
                    )}
                    <button onClick={stopTimer} style={{
                      background: '#f44336',
                      color: 'white',
                      border: 'none',
                      padding: '10px',
                      borderRadius: '8px',
                      cursor: 'pointer'
                    }}>
                      <Square size={18} />
                    </button>
                  </div>
                </div>
              </div>
            )}

            <h2 style={{ color: '#2665a9', marginBottom: '16px' }}>📋 Open Tasks</h2>
            {openTasks.length === 0 ? (
              <p style={{ textAlign: 'center', padding: '32px', color: '#666' }}>No open tasks 🎉</p>
            ) : (
              openTasks.map((task, index) => (
                <div key={task.id} style={{
                  background: index === 0 ? '#d4e6f7' : '#e6f0fa',
                  padding: '16px',
                  borderRadius: '12px',
                  marginBottom: '12px',
                  border: index === 0 ? '3px solid #2665a9' : '1px solid #cce0f5',
                  position: 'relative'
                }}>
                  {index === 0 && (
                    <div style={{
                      position: 'absolute',
                      top: '-12px',
                      left: '16px',
                      background: '#2665a9',
                      color: 'white',
                      padding: '4px 16px',
                      borderRadius: '12px',
                      fontSize: '13px',
                      fontWeight: '600'
                    }}>
                      🎯 Now
                    </div>
                  )}
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px', flexWrap: 'wrap' }}>
                    <div style={{
                      background: '#2665a9',
                      color: 'white',
                      borderRadius: '50%',
                      width: '28px',
                      height: '28px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '14px',
                      fontWeight: '600'
                    }}>
                      {index + 1}
                    </div>
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                      style={{ width: '22px', height: '22px', cursor: 'pointer' }}
                    />
                    <div style={{ flex: 1, minWidth: '150px', fontWeight: index === 0 ? '600' : '400' }}>
                      {task.name}
                    </div>
                    <div style={{
                      background: 'white',
                      padding: '6px 12px',
                      borderRadius: '20px',
                      fontSize: '14px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}>
                      <Clock size={16} />
                      {task.duration} min
                    </div>
                    {timerTask === task.id ? (
                      <div style={{
                        background: '#ffd700',
                        padding: '6px 12px',
                        borderRadius: '6px',
                        fontSize: '13px',
                        fontWeight: '600'
                      }}>
                        ⏱️ Timing
                      </div>
                    ) : (
                      <button onClick={() => startTimer(task.id)} style={{
                        background: '#4caf50',
                        color: 'white',
                        border: 'none',
                        padding: '6px 12px',
                        borderRadius: '6px',
                        cursor: 'pointer'
                      }}>
                        <Play size={14} />
                      </button>
                    )}
                    <button onClick={() => startEdit(task)} style={{
                      background: 'white',
                      border: '1px solid #2665a9',
                      color: '#2665a9',
                      padding: '6px 12px',
                      borderRadius: '6px',
                      cursor: 'pointer'
                    }}>
                      Edit
                    </button>
                    <button onClick={() => deleteTask(task.id)} style={{
                      background: 'white',
                      border: '1px solid #f44336',
                      color: '#f44336',
                      padding: '6px 12px',
                      borderRadius: '6px',
                      cursor: 'pointer'
                    }}>
                      <Trash2 size={14} />
                    </button>
                  </div>
                </div>
              ))
            )}

            {completedTodayTasks.length > 0 && (
              <>
                <h2 style={{ color: '#4caf50', marginTop: '32px', marginBottom: '16px' }}>✅ Completed Today</h2>
                {completedTodayTasks.map(task => (
                  <div key={task.id} style={{
                    background: '#f5f5f5',
                    padding: '16px',
                    borderRadius: '12px',
                    marginBottom: '12px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px'
                  }}>
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                      style={{ width: '22px', height: '22px', cursor: 'pointer' }}
                    />
                    <Check size={20} color="#4caf50" />
                    <div style={{ flex: 1, color: '#666', textDecoration: 'line-through' }}>
                      {task.name}
                    </div>
                    <div style={{ fontSize: '13px', color: '#666' }}>
                      {task.actualTime || task.duration} min
                    </div>
                  </div>
                ))}
              </>
            )}

            <div style={{
              background: 'linear-gradient(135deg, #2665a9 0%, #1a4d7f 100%)',
              color: 'white',
              padding: '24px',
              borderRadius: '12px',
              marginTop: '32px'
            }}>
              <h2 style={{ fontSize: '20px', marginBottom: '16px' }}>📊 Daily Summary</h2>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>Total Planned Time</div>
                  <div style={{ fontSize: '24px', fontWeight: '600' }}>{totalPlannedTime} min</div>
                </div>
                <div>
                  <div style={{ fontSize: '14px', opacity: 0.9, marginBottom: '4px' }}>Total Completed</div>
                  <div style={{ fontSize: '24px', fontWeight: '600' }}>{totalCompleted} min</div>
                </div>
              </div>
              <div style={{ marginTop: '16px' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '14px', marginBottom: '8px' }}>
                  <span>Progress</span>
                  <span>{progressPercent}%</span>
                </div>
                <div style={{ background: 'rgba(255,255,255,0.3)', borderRadius: '10px', height: '20px', overflow: 'hidden' }}>
                  <div style={{ background: 'white', height: '100%', width: `${progressPercent}%`, transition: 'width 0.5s ease' }} />
                </div>
              </div>
            </div>
          </>
        ) : (
          <div>
            <h2 style={{ color: '#2665a9', marginBottom: '24px' }}>📜 History & Schedule</h2>
            
            <div style={{ background: '#f8f9fa', padding: '24px', borderRadius: '12px', marginBottom: '24px', border: '1px solid #e0e0e0' }}>
              <h3 style={{ margin: '0 0 16px 0' }}>
                {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h3>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '8px', marginBottom: '8px' }}>
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} style={{ textAlign: 'center', fontSize: '12px', fontWeight: '600', color: '#666', padding: '8px' }}>
                    {day}
                  </div>
                ))}
              </div>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '8px' }}>
                {Array(getCalendarDays().firstDay).fill(null).map((_, i) => (
                  <div key={`empty-${i}`} style={{ padding: '8px' }} />
                ))}
                {getCalendarDays().days.map(({ date, dateStr, hasHistory, hasScheduled, isPast, isToday }) => {
                  const isSelected = dateStr === selectedHistoryDate;
                  let bgColor = 'white';
                  if (isSelected) bgColor = '#2665a9';
                  else if (hasHistory) bgColor = '#4caf50';
                  else if (hasScheduled) bgColor = '#ff9800';
                  else if (isPast && !isToday) bgColor = '#e0e0e0';
                  else if (isToday) bgColor = '#e6f0fa';
                  
                  return (
                    <div
                      key={dateStr}
                      onClick={() => {
                        if (hasHistory || hasScheduled) {
                          setSelectedHistoryDate(isSelected ? null : dateStr);
                        } else {
                          setCalendarDateModal(dateStr);
                        }
                      }}
                      style={{
                        padding: '12px',
                        textAlign: 'center',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        background: bgColor,
                        color: (isSelected || hasHistory || hasScheduled) ? 'white' : '#333',
                        fontWeight: isToday || hasHistory || hasScheduled ? '600' : '400',
                        border: isToday ? '2px solid #2665a9' : '1px solid #e0e0e0',
                        fontSize: '14px'
                      }}
                    >
                      {date.getDate()}
                    </div>
                  );
                })}
              </div>
              <div style={{ marginTop: '16px', display: 'flex', gap: '16px', fontSize: '13px', color: '#666', flexWrap: 'wrap' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{ width: '16px', height: '16px', background: '#4caf50', borderRadius: '4px' }} />
                  <span>Completed</span>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{ width: '16px', height: '16px', background: '#ff9800', borderRadius: '4px' }} />
                  <span>Scheduled</span>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{ width: '16px', height: '16px', background: '#e0e0e0', borderRadius: '4px' }} />
                  <span>Past</span>
                </div>
              </div>
            </div>

            {calendarDateModal && (
              <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'rgba(0,0,0,0.5)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                zIndex: 1000
              }}>
                <div style={{
                  background: 'white',
                  padding: '24px',
                  borderRadius: '12px',
                  maxWidth: '400px',
                  width: '90%'
                }}>
                  <h3 style={{ margin: '0 0 16px 0' }}>
                    Add Task for {new Date(calendarDateModal).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                  </h3>
                  <input
                    type="text"
                    placeholder="Task name"
                    value={quickTaskName}
                    onChange={(e) => setQuickTaskName(e.target.value)}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid #ccc',
                      borderRadius: '8px',
                      marginBottom: '12px',
                      boxSizing: 'border-box'
                    }}
                  />
                  <input
                    type="number"
                    placeholder="Duration (minutes)"
                    value={quickTaskDuration}
                    onChange={(e) => setQuickTaskDuration(e.target.value)}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid #ccc',
                      borderRadius: '8px',
                      marginBottom: '12px',
                      boxSizing: 'border-box'
                    }}
                  />
                  <div style={{ display: 'flex', gap: '12px' }}>
                    <button onClick={() => addQuickTask(calendarDateModal)} style={{
                      flex: 1,
                      background: '#2665a9',
                      color: 'white',
                      border: 'none',
                      padding: '12px',
                      borderRadius: '8px',
                      cursor: 'pointer'
                    }}>
                      Add Task
                    </button>
                    <button onClick={() => {
                      setCalendarDateModal(null);
                      setQuickTaskName('');
                      setQuickTaskDuration('');
                    }} style={{
                      flex: 1,
                      background: '#ddd',
                      border: 'none',
                      padding: '12px',
                      borderRadius: '8px',
                      cursor: 'pointer'
                    }}>
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}

            {selectedHistoryDate && (selectedDayTasks.length > 0 || selectedScheduledTasks.length > 0) && (
              <div style={{
                background: '#f8f9fa',
                padding: '24px',
                borderRadius: '12px',
                border: '1px solid #e0e0e0'
              }}>
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  marginBottom: '16px',
                  paddingBottom: '12px',
                  borderBottom: '2px solid #2665a9'
                }}>
                  <h3 style={{ margin: 0, color: '#2665a9' }}>
                    📅 {new Date(selectedHistoryDate).toLocaleDateString('en-US', { 
                      weekday: 'long', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
                  </h3>
                  <button onClick={() => setSelectedHistoryDate(null)} style={{
                    background: '#ddd',
                    border: 'none',
                    padding: '6px 12px',
                    borderRadius: '6px',
                    cursor: 'pointer'
                  }}>
                    <X size={14} />
                  </button>
                </div>
                
                {selectedDayTasks.length > 0 && (
                  <div style={{ marginBottom: '16px' }}>
                    <h4 style={{ color: '#4caf50', margin: '0 0 12px 0' }}>✅ Completed ({selectedDayTasks.length})</h4>
                    {selectedDayTasks.map(task => (
                      <div key={task.id} style={{
                        background: 'white',
                        padding: '12px',
                        borderRadius: '8px',
                        marginBottom: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px'
                      }}>
                        <Check size={18} color="#4caf50" />
                        <div style={{ flex: 1 }}>{task.name}</div>
                        <div style={{ fontSize: '13px', color: '#666' }}>
                          {task.actualTime || task.duration} min
                        </div>
                        <button onClick={() => startEdit(task)} style={{
                          background: 'white',
                          border: '1px solid #2665a9',
                          color: '#2665a9',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          cursor: 'pointer'
                        }}>
                          <Edit2 size={12} />
                        </button>
                        <button onClick={() => deleteHistoryTask(task.id)} style={{
                          background: 'white',
                          border: '1px solid #f44336',
                          color: '#f44336',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          cursor: 'pointer'
                        }}>
                          <Trash2 size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                )}

                {selectedScheduledTasks.length > 0 && (
                  <div>
                    <h4 style={{ color: '#ff9800', margin: '0 0 12px 0' }}>📅 Scheduled ({selectedScheduledTasks.length})</h4>
                    {selectedScheduledTasks.map(task => (
                      <div key={task.id} style={{
                        background: 'white',
                        padding: '12px',
                        borderRadius: '8px',
                        marginBottom: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px',
                        border: '2px solid #ff9800'
                      }}>
                        <Calendar size={18} color="#ff9800" />
                        <div style={{ flex: 1, fontWeight: '500' }}>{task.name}</div>
                        <div style={{ fontSize: '13px', color: '#666' }}>{task.duration} min</div>
                        <button onClick={() => startEdit(task)} style={{
                          background: 'white',
                          border: '1px solid #ff9800',
                          color: '#ff9800',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          cursor: 'pointer'
                        }}>
                          <Edit2 size={12} />
                        </button>
                        <button onClick={() => deleteTask(task.id)} style={{
                          background: 'white',
                          border: '1px solid #f44336',
                          color: '#f44336',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          cursor: 'pointer'
                        }}>
                          <Trash2 size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {editingTask && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            padding: '24px',
            borderRadius: '12px',
            maxWidth: '500px',
            width: '90%'
          }}>
            <h3 style={{ margin: '0 0 16px 0' }}>Edit Task</h3>
            <input
              type="text"
              value={editName}
              onChange={(e) => setEditName(e.target.value)}
              placeholder="Task name"
              style={{
                width: '100%',
                padding: '12px',
                border: '1px solid #ccc',
                borderRadius: '8px',
                marginBottom: '12px',
                boxSizing: 'border-box'
              }}
            />
            <div style={{ display: 'flex', gap: '8px', marginBottom: '12px' }}>
              <input
                type="number"
                value={editDuration}
                onChange={(e) => setEditDuration(e.target.value)}
                placeholder="Duration"
                style={{
                  flex: 1,
                  padding: '12px',
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  boxSizing: 'border-box'
                }}
              />
              <input
                type="number"
                value={editActualTime}
                onChange={(e) => setEditActualTime(e.target.value)}
                placeholder="Actual time"
                style={{
                  flex: 1,
                  padding: '12px',
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  boxSizing: 'border-box'
                }}
              />
            </div>
            {editScheduledDate !== undefined && (
              <input
                type="date"
                value={editScheduledDate}
                onChange={(e) => setEditScheduledDate(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  marginBottom: '12px',
                  boxSizing: 'border-box'
                }}
              />
            )}
            {editCompletedDate !== undefined && (
              <input
                type="date"
                value={editCompletedDate}
                onChange={(e) => setEditCompletedDate(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  marginBottom: '12px',
                  boxSizing: 'border-box'
                }}
              />
            )}
            <div style={{ display: 'flex', gap: '12px' }}>
              <button onClick={saveEdit} style={{
                flex: 1,
                background: '#2665a9',
                color: 'white',
                border: 'none',
                padding: '12px',
                borderRadius: '8px',
                cursor: 'pointer'
              }}>
                Save
              </button>
              <button onClick={cancelEdit} style={{
                flex: 1,
                background: '#ddd',
                border: 'none',
                padding: '12px',
                borderRadius: '8px',
                cursor: 'pointer'
              }}>
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
